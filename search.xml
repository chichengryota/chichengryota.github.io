<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>socket.io构建聊天室</title>
      <link href="/2020/10/20/socket.io-gou-jian-liao-tian-shi/"/>
      <url>/2020/10/20/socket.io-gou-jian-liao-tian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-node-socket-io构建在线聊天室"><a href="#vue-node-socket-io构建在线聊天室" class="headerlink" title="vue+node+socket.io构建在线聊天室"></a>vue+node+socket.io构建在线聊天室</h1><h3 id="socket-io是什么"><a href="#socket-io是什么" class="headerlink" title="socket.io是什么"></a>socket.io是什么</h3><p>我们应该首先了解<strong>websocket</strong>是什么</p><p>首先WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。在传输中有两个方法，很多网站为了实现推送技术，所用的技术都是 <strong>Ajax 轮询</strong>，轮询是在每几秒内循环，<strong>由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端浏览器</strong>，缺点就是消耗资源。</p><p>浏览器通过JS向服务器发出建立WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。（TCP是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构）当获取连接后，可以<strong>通过send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。</strong></p><p><strong>Socket.io</strong>是一个WebSocket库，包括了客户端的js和服务器端的nodejs，它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。它会自动根据浏览器从WebSocket、AJAX长轮询、Iframe流等等各种方式中选择最佳的方式来实现网络实时应用，非常方便和人性化，而且支持的浏览器最低达IE5.5</p><p><strong>Socket.io</strong>建立连接</p><pre><code>io.on('connection', function(socket)&amp;#123;  console.log('a user connected');&amp;#125;);</code></pre><p>每个 socket 还会触发一个特殊的 <code>disconnect</code> 事件：</p><pre><code>io.on('connection', function(socket)&amp;#123;  console.log('a user connected');  socket.on('disconnect', function()&amp;#123;    console.log('user disconnected');  &amp;#125;);&amp;#125;);</code></pre><p>使用socket.emit()发送数据</p><pre><code>socket.emit("login", data);</code></pre><p>使用socket.on()接收数据，第一个参数要保持一致</p><pre><code>socket.on("login", data =&gt; console.log(data));</code></pre><p>使用io.emit()向所有用户广播数据</p><pre><code>io.emit("addUser", data);</code></pre><h3 id="服务器端使用socket-io"><a href="#服务器端使用socket-io" class="headerlink" title="服务器端使用socket.io"></a>服务器端使用socket.io</h3><p>首先安装nodejs的express框架，创建服务</p><pre><code>npm install express --save</code></pre><pre><code>let express = require('express');let app = express();let http = require('http');let server = http.createServer(app);</code></pre><p>创建socket.io实例，监听端口，引入util文件夹中的socket.js文件</p><pre><code>let io = require('socket.io')(server);require('./util/socket')(io);</code></pre><pre><code>server.listen('3000', function () &amp;#123;  console.log("服务器已启动");&amp;#125;);</code></pre><p>socket.js</p><pre><code>module.exports = function (io) &amp;#123;  //记录所有已经登录的用户  const userList = []  io.on('connection', socket =&gt; &amp;#123;    socket.on("login", data =&gt; &amp;#123;      // 判断，如果data在userList数组中存在，说明该用户已经登录，不允许登录      // 如果data在userList数组中不存在，说明该用户没有登录，允许登录      let user = userList.length !== 0 ? userList.find(item =&gt; item.username === data.username) : false      if (user) &amp;#123;        //表示用户存在,登录失败，服务器需要给当前用户响应，告诉登录失败        socket.emit("userExit", &amp;#123;          msg: "该用户已登录聊天室，登录失败"        &amp;#125;)      &amp;#125; else &amp;#123;        // 表示用户不存在,登录成功        userList.push(data)        socket.emit("loginsuccess", &amp;#123;          ...data,          msg: "登录聊天室成功"        &amp;#125;)        //告诉所有的用户，有用户加入到聊天室，广播消息:io.emit        io.emit("addUser", data)        //告诉所有的用户，目前聊天室中有多少人        io.emit("userList", userList)        // 把登录成功的用户名和头像存储起来        socket.username = data.username      &amp;#125;    &amp;#125;)    // 用户断开连接的功能    socket.on("disconnect", () =&gt; &amp;#123;      // 把当前用户的信息从userList中删除掉      let idx = userList.findIndex(item =&gt; item.username === socket.username)      userList.splice(idx, 1)      // 告诉所有人有人离开了聊天室      io.emit("leaveroom", &amp;#123;        username: socket.username      &amp;#125;)      // 告诉所有人，userList发生了更新      io.emit("userList", userList)    &amp;#125;)    // 监听聊天的消息    socket.on("sendMessage", data =&gt; &amp;#123;      //广播给所有用户      io.emit("receiveMessage", data)    &amp;#125;)    // 接受图片信息    socket.on("sendImage", data =&gt; &amp;#123;      //广播给所有用户      io.emit("receiveImage", data)    &amp;#125;)  &amp;#125;);&amp;#125;</code></pre><h3 id="客户端使用socket-io"><a href="#客户端使用socket-io" class="headerlink" title="客户端使用socket.io"></a>客户端使用socket.io</h3><p>服务器端使用的是socket.io-client</p><pre><code>安装: npm install socket.io-client --save</code></pre><p>可以直接在组件中引入</p><pre><code>import io from "socket.io-client";</code></pre><p>登录聊天室组件创建连接，再引入进入聊天室组件</p><p>部分代码</p><pre><code>&lt;template&gt;  &lt;div&gt;    &lt;el-card class="chatBox" :body-style="&amp;#123; padding: '0px' &amp;#125;"&gt;      &lt;div class="loginChat" v-if="isLogin"&gt;        &lt;img :src="avatar" alt="" /&gt;        &lt;span&gt;&amp;#123;&amp;#123; username &amp;#125;&amp;#125;&lt;/span&gt;        &lt;button @click="loginChat"&gt;进入聊天室&lt;/button&gt;      &lt;/div&gt;      &lt;room        v-else        :user="user"        :userList="userList"        ref="chatroom"        @sendServer="sendServer"        :message="message"        @handleFile="handleFile"      /&gt;    &lt;/el-card&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><pre><code>import Room from "./ChatRoom";//引入socket.io-clientimport io from "socket.io-client";export default &amp;#123;  components: &amp;#123; Room &amp;#125;,  data() &amp;#123;    return &amp;#123;      username: "",      avatar: "",      isLogin: true,      socket: null,      user: &amp;#123;&amp;#125;,      userList: [],      message: &amp;#123;&amp;#125;,    &amp;#125;;  &amp;#125;,  methods: &amp;#123;    loginChat() &amp;#123;      this.socket.emit("login", &amp;#123;        username: this.username,        avatar: this.avatar,      &amp;#125;);    &amp;#125;,    handleFile(file) &amp;#123;      this.socket.emit("sendImage", &amp;#123; ...this.user, file &amp;#125;);    &amp;#125;,    sendServer(content) &amp;#123;      const &amp;#123; username, avatar &amp;#125; = this.user;      this.socket.emit("sendMessage", &amp;#123; msg: content, username, avatar &amp;#125;);    &amp;#125;,  &amp;#125;,</code></pre><pre><code>  mounted() &amp;#123;    this.username = window.sessionStorage.getItem("username");    this.avatar = window.sessionStorage.getItem("avatar");    /**     * 聊天室的主要功能     */    // 连接服务器    this.socket = io("http://localhost:3000/");    // 监听登录失败的请求    this.socket.on("userExit", (data) =&gt; this.$message.error(data.msg));    // 监听登录成功的请求    this.socket.on("loginsuccess", (data) =&gt; &amp;#123;      this.$message.success(data.msg);      this.user = data;      this.isLogin = false;    &amp;#125;);    this.socket.on("addUser", (data) =&gt; &amp;#123;      this.$store.commit("setJoinRoom", data);      this.$refs.chatroom ? this.$refs.chatroom.haveOneJoinRoom() : null;    &amp;#125;);    this.socket.on("leaveroom", (data) =&gt; &amp;#123;      this.$store.commit("setLeaveRoom", data);      this.$refs.chatroom ? this.$refs.chatroom.haveOneleaveRoom() : null;    &amp;#125;);    // 监听用户列表的信息    this.socket.on("userList", (data) =&gt; &amp;#123;      this.userList = data;    &amp;#125;);    // 监听聊天的消息    this.socket.on("receiveMessage", (data) =&gt; &amp;#123;      // 把接收到的消息显示到聊天窗口中      this.message = data;    &amp;#125;);    // 监听图片的消息    this.socket.on("receiveImage", (data) =&gt; &amp;#123;      // 把接收到的图片显示到聊天窗口中      this.$refs.chatroom.handleImage(data);    &amp;#125;);  &amp;#125;,  destroyed() &amp;#123;    if (this.socket) this.socket.disconnect();  &amp;#125;,</code></pre><h3 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h3><p><img src="socket.io%E6%9E%84%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4.assets/image-20201026105708297.png" alt="image-20201026105708297"></p><p><img src="socket.io%E6%9E%84%E5%BB%BA%E8%81%8A%E5%A4%A9%E5%AE%A4.assets/image-20201026105828044.png" alt="image-20201026105828044"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websocket </tag>
            
            <tag> socket.io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打动人心的句子(一)</title>
      <link href="/2020/10/06/zhai-chao-1/"/>
      <url>/2020/10/06/zhai-chao-1/</url>
      
        <content type="html"><![CDATA[<ul><li><p>People come and go, we struggled with laughter and tears,<br>and all the years have gone by,still Ihave you by my side. </p><p>你陪了我多少年，花开花落。一路上起起跌跌</p></li><li><p>有些路你和某人一起走，就长得离谱，你和另外一些人走，就短得让人舍不得迈开脚步。</p></li><li><p>最孤单的人分两种，一种恨不得全世界都跟他一样倒霉，一种则希望别人能幸福，因为看到幸福的人，他也略略觉得温暖。</p></li><li><p>一辈子没有见过光的蛾子 遇到火就会扑上去 烧死别人无所谓 烧死自己也不可惜 烧掉整个世界都没什么 只是想要那 光。</p></li><li><p>他想自己在她眼里出现的时候,璀璨如星辰。可即使有那么一天,他披挂着漫天的星辰归来,可是仰望天空的瞳孔已经不在,看星星的女孩已经走了,那璀璨又有什么意思呢?孤单得连星星也想坠落。</p></li><li><p>“我们都是小怪兽，有一天会被正义的奥特曼杀死。”<br>是啊，你是小怪兽，可小怪兽也有小怪兽的好朋友，孤独的小怪兽们害怕得靠在一起，但如果正义的奥特曼要来杀你，我就帮你把你把正义的奥特曼杀死。</p></li><li><p>“04.24，和Sakura去东京天空树，世界上最暖和的地方在天空树的顶上。”<br>“04.25，和Sakura去明治神宫，有人在那里举办婚礼。”<br>“04.26，和Sakura去迪士尼，鬼屋很可怕，但是有Sakura在，所以不可怕。”<br>“Sakura最好了。”…</p></li><li><p>我坐在天台上<br>时光短促又漫长<br>风从我耳边经过<br>带来整个世界的声音<br>风中<br>有人弹唱<br>有人舞蹈<br>有人相爱</p></li><li><p>你是凝结的时间，流动的语言，黑色的雾里，有隐约的光。</p><p>可是透过你的双眼，会看不清世界，花朵的凋萎，在瞬间，而花朵的绽放，在昨天。</p><p>“好好睡，晚安。”</p></li><li><p>若有那一天到来，天幕坠落，世界沉沦，愿我们都还相信爱情。</p></li><li><p>骑士再强大，结局往往也是覆灭于战场，连骑士王都不免坠落。所谓英雄，往往只是不惜一切、能撑到最后的人而已。</p></li><li><p>隐约雷鸣 阴霾天空 但盼风雨来 能留你在此 隐约雷鸣 阴霾天空 即使天无雨 我亦留此地、</p></li><li><p>时间啊，看似是以相同的速度从大家身边流过，其实不是，时间的流动因人而异，即使有的人已经放弃梦想，但他的时间还是会朝着那个方向继续前进。</p></li><li><p>那一个接着一个走进我们生命的人，并肩而行，渐行渐远，再然后，便是决绝与遗忘。当我们懂得这些的时候，我们学会在啤酒和沉默之间藏起自己的心事，却在记忆中辗转反恻。直到有一天，我们发现这一切都是命运，无可更改。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flex弹性盒模型用法</title>
      <link href="/2020/09/20/flex-dan-xing-he-mo-xing/"/>
      <url>/2020/09/20/flex-dan-xing-he-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="flex弹性盒模型用法"><a href="#flex弹性盒模型用法" class="headerlink" title="flex弹性盒模型用法"></a>flex弹性盒模型用法</h2><h3 id="flex-弹性盒、伸缩盒"><a href="#flex-弹性盒、伸缩盒" class="headerlink" title="flex(弹性盒、伸缩盒)"></a>flex(弹性盒、伸缩盒)</h3><ul><li><p>是CSS中的又一种布局手段，它主要用来代替浮动来完成页面的布局</p></li><li><p>flex可以使元素具有弹性，让元素可以跟随页面的大小的改变而改变</p></li><li><p>弹性容器</p><ul><li>要使用弹性盒，必须先将一个元素设置为弹性容器</li><li>我们通过 display 来设置弹性容器</li><li>display:flex 设置为块级弹性容器</li><li>display:inline-flex 设置为行内的弹性容器</li></ul></li><li><p>弹性元素</p></li><li><p>弹性容器的子元素是弹性元素（弹性项）</p></li><li><p>弹性元素可以同时是弹性容器</p></li></ul><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>指定容器中弹性元素的排列方式</p><p>可选值：</p><ul><li><p>row 默认值，弹性元素在容器中水平排列（左向右）</p></li><li><p>row-reverse 弹性元素在容器中反向水平排列（右向左）</p></li><li><p>column 弹性元素纵向排列（自上向下）</p></li><li><p>column-reverse 弹性元素方向纵向排列（自下向上）</p></li><li><p>主轴：</p></li></ul><p>​       弹性元素的排列方向称为主轴</p><ul><li>侧轴：</li></ul><p>​       与主轴垂直方向的称为侧轴</p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>指定弹性元素的伸展的系数</p><ul><li><p>当父元素有多余空间的时，子元素如何伸展 </p></li><li><p>父元素的剩余空间，会按照比例进行分配</p></li></ul><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>指定弹性元素的收缩系数</p><ul><li>当父元素中的空间不足以容纳所有的子元素时，如果对子元素进行收缩</li></ul><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>设置弹性元素是否在弹性容器中自动换行</p><p>可选值：</p><ul><li>nowrap 默认值，元素不会自动换行 </li><li>wrap 元素沿着辅轴方向自动换行</li><li>wrap-reverse 元素沿着辅轴反方向换行</li></ul><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>如何分配主轴上的空白空间（主轴上的元素如何排列）</p><p>可选值：</p><ul><li>flex-start 元素沿着主轴起边排列</li><li>flex-end 元素沿着主轴终边排列</li><li>center 元素居中排列</li><li>space-around 空白分布到元素两侧</li><li>space-between 空白均匀分布到元素间</li><li>space-evenly 空白分布到元素的单侧</li></ul><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>wrap 和 direction 的简写属性</p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>元素在辅轴上如何对齐</p><p>元素间的关系</p><p>可选值：</p><ul><li>stretch 默认值，将元素的长度设置为相同的值</li><li>flex-start 元素不会拉伸，沿着辅轴起边对齐</li><li>flex-end 沿着辅轴的终边对齐</li><li>center 居中对齐</li><li>baseline 基线对齐</li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>辅轴空白空间的分布</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>用来覆盖当前弹性元素上的align-items</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>指定的是元素在主轴上的基础长度</p><p>如果主轴是 横向的 则 该值指定的就是元素的宽度</p><p>如果主轴是 纵向的 则 该值指定的是就是元素的高度</p><ul><li><p>默认值是 auto，表示参考元素自身的高度或宽度</p></li><li><p>如果传递了一个具体的数值，则以该值为准</p></li></ul><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>可以设置弹性元素所有的三个样式</p><p>flex 增长 缩减 基础;</p><ul><li>initial “flex: 0 1 auto”.</li><li>auto “flex: 1 1 auto”</li><li>none “flex: 0 0 auto” 弹性元素没有弹性</li></ul><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>决定弹性元素的排列顺序</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js输出下标的几种方式</title>
      <link href="/2020/09/20/js-shu-chu-xia-biao-de-ji-chong-fang-shi/"/>
      <url>/2020/09/20/js-shu-chu-xia-biao-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="使用原生js给每个li绑定onclick点击事件-输出每条li的下标（索引）的几种方式"><a href="#使用原生js给每个li绑定onclick点击事件-输出每条li的下标（索引）的几种方式" class="headerlink" title="使用原生js给每个li绑定onclick点击事件,输出每条li的下标（索引）的几种方式"></a>使用原生js给每个li绑定onclick点击事件,输出每条li的下标（索引）的几种方式</h1><p>html部分</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>11111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>22222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>33333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>44444<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>55555<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>首先需要获取页面中每一条li节点</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> lis<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1、通过设置属性方式-给每一条li设置属性index为i，-点击时就可以获取this的index属性。"><a href="#1、通过设置属性方式-给每一条li设置属性index为i，-点击时就可以获取this的index属性。" class="headerlink" title="1、通过设置属性方式 给每一条li设置属性index为i， 点击时就可以获取this的index属性。"></a>1、通过设置属性方式 给每一条li设置属性index为i， 点击时就可以获取this的index属性。</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">=</span>i<span class="token punctuation">;</span>    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="2、通过设置自定义属性方式，-给每一条li设置自定义属性index为i，-点击时就可以获取this的自定义属性index，同上面方法相似。"><a href="#2、通过设置自定义属性方式，-给每一条li设置自定义属性index为i，-点击时就可以获取this的自定义属性index，同上面方法相似。" class="headerlink" title="2、通过设置自定义属性方式， 给每一条li设置自定义属性index为i， 点击时就可以获取this的自定义属性index，同上面方法相似。"></a>2、通过设置自定义属性方式， 给每一条li设置自定义属性index为i， 点击时就可以获取this的自定义属性index，同上面方法相似。</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3、通过bind改变this指向为每一条li，传入第二个参数为i，在点击时就可以获取到i。"><a href="#3、通过bind改变this指向为每一条li，传入第二个参数为i，在点击时就可以获取到i。" class="headerlink" title="3、通过bind改变this指向为每一条li，传入第二个参数为i，在点击时就可以获取到i。"></a>3、通过bind改变this指向为每一条li，传入第二个参数为i，在点击时就可以获取到i。</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4、通过闭包自执行函数方式-，传入参数i，在函数内容返回一个函数体-赋值给每一条点击的li。"><a href="#4、通过闭包自执行函数方式-，传入参数i，在函数内容返回一个函数体-赋值给每一条点击的li。" class="headerlink" title="4、通过闭包自执行函数方式 ，传入参数i，在函数内容返回一个函数体 赋值给每一条点击的li。"></a>4、通过闭包自执行函数方式 ，传入参数i，在函数内容返回一个函数体 赋值给每一条点击的li。</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自执行函数把i作为实参，传递进去了，在内层函数进行使用</span>    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 每个事件都构成了一个闭包，每个闭包里都有一个自己的iindex</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="5、通过let-的块级作用域特点-获取到的是每个独立的i。"><a href="#5、通过let-的块级作用域特点-获取到的是每个独立的i。" class="headerlink" title="5、通过let 的块级作用域特点 获取到的是每个独立的i。"></a>5、通过let 的块级作用域特点 获取到的是每个独立的i。</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="6、通过数组forEach方式-无论箭头函数还是普通函数都能拿到index"><a href="#6、通过数组forEach方式-无论箭头函数还是普通函数都能拿到index" class="headerlink" title="6、通过数组forEach方式 无论箭头函数还是普通函数都能拿到index"></a>6、通过数组forEach方式 无论箭头函数还是普通函数都能拿到index</h3><pre class=" language-javascript"><code class="language-javascript">lis<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    item<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less语法基础</title>
      <link href="/2020/09/20/less-yu-fa-ji-chu/"/>
      <url>/2020/09/20/less-yu-fa-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="less语法总结"><a href="#less语法总结" class="headerlink" title="less语法总结"></a>less语法总结</h2><h3 id="less是一门css的预处理语言"><a href="#less是一门css的预处理语言" class="headerlink" title="less是一门css的预处理语言"></a>less是一门css的预处理语言</h3><ul><li><p>less是一个css的增强版，通过less可以编写更少的代码实现更强大的样式</p></li><li><p>在less中添加了许多的新特性：像对变量的支持、对mixin的支持… …</p></li><li><p>less的语法大体上和css语法一致，但是less中增添了许多对css的扩展，</p></li><li><p>所以浏览器无法直接执行less代码，要执行必须向将less转换为css，然后再由浏览器执行</p></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// less中的单行注释，注释中的内容不会被解析到css中</span><span class="token comment" spellcheck="true">/*    css中的注释，内容会被解析到css文件中*/</span></code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>在变量中可以存储一个任意的值，并且我们可以在需要时，任意的修改变量中的值</p></li><li><p>变量的语法： @变量名</p><pre class=" language-less"><code class="language-less"><span class="token variable">@a<span class="token punctuation">:</span></span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token variable">@b<span class="token punctuation">:</span></span><span class="token hexcode">#bfa</span><span class="token punctuation">;</span><span class="token variable">@c<span class="token punctuation">:</span></span>box<span class="token number">6</span><span class="token punctuation">;</span><span class="token mixin-usage function">.box5&amp;#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用变量是，如果是直接使用则以 @变量名 的形式使用即可</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@a</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token variable">@b</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作为类名，或者一部分值使用时必须以 @&amp;#123;变量名&amp;#125; 的形式使用</span><span class="token number">.</span>@&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>c&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@a</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("@&amp;#123;c&amp;#125;/1.png")</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token variable">@d<span class="token punctuation">:</span></span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token variable">@d<span class="token punctuation">:</span></span><span class="token number">300</span>px<span class="token punctuation">;</span>div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 变量发生重名时，会优先使用比较近的变量</span>    <span class="token variable">@d<span class="token punctuation">:</span></span><span class="token number">115</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@d</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@e</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以在变量声明前就使用变量</span><span class="token variable">@e<span class="token punctuation">:</span></span><span class="token number">335</span>px<span class="token punctuation">;</span></code></pre></li></ul><h3 id="父元素和拓展"><a href="#父元素和拓展" class="headerlink" title="父元素和拓展"></a>父元素和拓展</h3><p>&amp; 就表示外层的父元素</p><pre class=" language-less"><code class="language-less"><span class="token number">.</span>box<span class="token number">1</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    ><span class="token number">.</span>box<span class="token number">3</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        &amp;<span class="token punctuation">:</span>hover&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为box1设置一个hover</span>    <span class="token comment" spellcheck="true">//&amp; 就表示外层的父元素</span>    &amp;<span class="token punctuation">:</span>hover&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    div &amp;&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>:extend() 对当前选择器扩展指定选择器的样式（选择器分组）</p><pre class=" language-less"><code class="language-less"><span class="token number">.</span>p<span class="token number">1</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.p2:extend</span><span class="token punctuation">(</span><span class="token number">.</span>p<span class="token number">1</span><span class="token punctuation">)</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h3><p>mixin 混合:直接对指定的样式进行引用，这里就相当于将p1的样式在这里进行了复制</p><pre class=" language-less"><code class="language-less"><span class="token number">.</span>p<span class="token number">3</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token mixin-usage function">.p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>使用类选择器时可以在选择器后边添加一个括号，这时我们实际上就创建了一个mixins</p><pre class=" language-less"><code class="language-less"><span class="token number">.</span>p<span class="token number">4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token mixin-usage function">.p5&amp;#123</span><span class="token punctuation">;</span>    <span class="token mixin-usage function">.p4</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="混合函数"><a href="#混合函数" class="headerlink" title="混合函数"></a>混合函数</h3><p>在混合函数中可以直接设置变量</p><pre class=" language-less"><code class="language-less"><span class="token number">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token variable">@w<span class="token punctuation">:</span></span><span class="token number">100</span>px<span class="token punctuation">,</span><span class="token variable">@h<span class="token punctuation">:</span></span><span class="token number">200</span>px<span class="token punctuation">,</span><span class="token variable">@bg-color<span class="token punctuation">:</span></span>red<span class="token punctuation">)</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@h</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token variable">@bg-color</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用混合函数，按顺序传递参数</span>    <span class="token comment" spellcheck="true">// .test(200px,300px,#bfa);</span>    <span class="token number">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">300</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// .test(@bg-color:red, @h:100px, @w:300px);</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>任何数字、颜色都可以参与运算</p><pre class=" language-less"><code class="language-less"><span class="token variable">@base <span class="token punctuation">:</span></span> <span class="token number">10%</span><span class="token punctuation">;</span><span class="token variable">@filter <span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">@other <span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">+</span> <span class="token variable">@filter</span><span class="token punctuation">;</span><span class="token property">color</span> <span class="token punctuation">:</span> <span class="token hexcode">#888</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token property">background-color</span> <span class="token punctuation">:</span> <span class="token variable">@base</span>=color <span class="token operator">+</span> <span class="token hexcode">#111</span><span class="token punctuation">;</span><span class="token property">height</span> <span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> filterl<span class="token punctuation">;</span></code></pre><h3 id="Math函数"><a href="#Math函数" class="headerlink" title="Math函数"></a>Math函数</h3><p>less提供了一组方便的数学函数，可以使用它们处理一些数字类型的值。</p><pre class=" language-less"><code class="language-less"><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.67</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns `2`</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">2.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// returns `3`</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">2.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// returns `2`</span><span class="token function">percentage</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns `50%`</span></code></pre><h3 id="import导入"><a href="#import导入" class="headerlink" title="import导入"></a>import导入</h3><p>import用来将其他的less引入到当前的less</p><p>可以通过import来将其他的less引入到当前的less中</p><pre class=" language-less"><code class="language-less"><span class="token variable">@import</span> <span class="token string">"syntax2.less"</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax封装源码</title>
      <link href="/2020/09/20/ajax-feng-zhuang/"/>
      <url>/2020/09/20/ajax-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="Ajax-封装源码"><a href="#Ajax-封装源码" class="headerlink" title="Ajax 封装源码"></a>Ajax 封装源码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000/'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token string">'20'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    header<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    error<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置默认参数，用户新传入的参数可以覆盖默认参数</span>    <span class="token keyword">let</span> defaults <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        header<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        error<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义变量</span>    <span class="token keyword">let</span> type <span class="token operator">=</span> defaults<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        url <span class="token operator">=</span> defaults<span class="token punctuation">.</span>url<span class="token punctuation">,</span>        data <span class="token operator">=</span> defaults<span class="token punctuation">.</span>data<span class="token punctuation">,</span>        header <span class="token operator">=</span> defaults<span class="token punctuation">.</span>header<span class="token punctuation">,</span>        success <span class="token operator">=</span> defaults<span class="token punctuation">.</span>success<span class="token punctuation">,</span>        error <span class="token operator">=</span> defaults<span class="token punctuation">.</span>error<span class="token punctuation">,</span>        dataArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>，        params <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建 Ajax，兼容 IE 的写法</span>    <span class="token keyword">let</span> xhr <span class="token operator">=</span> XMLHttpRequest <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Microsoft.XMLHTTP'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将 data 中要传递的对象类型参数转换为 &amp; 连接的字符串类型参数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        dataArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    params <span class="token operator">=</span> dataArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// GET 请求：将参数拼接到 URL 后边并发送请求</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> params<span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\?$/g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true表示异步</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// POST 请求：获取参数请求格式类型，JSON 格式需先将对象类型转换为对象字符串类型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> contentType <span class="token operator">=</span> header<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 表示异步</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>contentType <span class="token operator">===</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取响应数据的格式类型，JSON 格式的需将对象字符串类型转换为对象类型</span>    xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> contentType <span class="token operator">=</span> xhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> responseText <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            responseText <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">>=</span><span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status<span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">304</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">success</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">error</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><h3 id="JSONP-封装源码"><a href="#JSONP-封装源码" class="headerlink" title="JSONP 封装源码"></a>JSONP 封装源码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> attr <span class="token keyword">in</span> options<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        params <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> attr <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>data<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> callback <span class="token operator">=</span> <span class="token string">'jsonp'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">[</span>callback<span class="token punctuation">]</span> <span class="token operator">=</span> options<span class="token punctuation">.</span>success<span class="token punctuation">;</span>    <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span>src <span class="token operator">=</span> options<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">'?callback='</span> <span class="token operator">+</span> callback <span class="token operator">+</span> params<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo框架搭建博客</title>
      <link href="/2020/09/02/hexo-kuai-su-da-jian-bo-ke/"/>
      <url>/2020/09/02/hexo-kuai-su-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo是一个静态博客框架，基于Node.js，将Markdown文章通过渲染引擎，生成一个静态网页，再结合Git命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="一、安装Node-js和Git"><a href="#一、安装Node-js和Git" class="headerlink" title="一、安装Node.js和Git"></a>一、安装Node.js和Git</h2><p>这个安装百度一下就能完成，挺简单的，但是要注意node安装完后需要配置环境变量</p><h2 id="二、Github注册以及Github-Pages创建"><a href="#二、Github注册以及Github-Pages创建" class="headerlink" title="二、Github注册以及Github Pages创建"></a>二、Github注册以及Github Pages创建</h2><ol><li>打开Github<a href="https://github.com/">官网首页</a>，点击右上角的<strong>Sign Up</strong> ，然后在出现的页面上填写你的相关信息，进行注册：</li></ol><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMDM0MzIucG5n" alt="img"></p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMDQ2MzkucG5n" alt="img"></p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMDQ5NTUucG5n" alt="img"></p><p>验证完成后，点击Next：Select a plan，会出现如上图的验证界面，同理，只需要将其中的动物调整为正向显示即可。接着会出现下图的界面，选择Free，下方的两个选项可选可不选，点击<strong>Continue</strong>继续：</p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTE0MzEucG5n" alt="img"></p><p>这时Github会给你发一封邮件，验证一下即可，验证过后才可以创建库。</p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTI3MjEucG5n" alt="img"></p><p>验证完成后，开始创建库，如下图所示，仓库名创建格式必须为：<code>&lt;用户名&gt;.github.io</code>，<code>Description</code>为描述仓库，自定义写，填写必要的描述，也可不填。勾选<code>Initialize this repository with a README</code>点击<code>Creat repository</code>进行创建。</p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTI1MzgucG5n" alt="img"></p><p>然后就会出现如图所示的界面，即仓库创建成功！</p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTMzMjEucG5n" alt="img"></p><p>我们来测试一下，点击<code>Create new file</code>，出现如下界面，然后命名文件名为<code>index.html</code>，在填写如图的内容，再点击<code>Commit new file</code>，即创建成功，然后打开一个新的网页，输入网址<code>https://&lt;你的用户名&gt;.github.io</code>，即可以看见一个新的网页，其中的内容就是你写的内容。</p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTQwMjkucG5n" alt="img"></p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTM5NTcucG5n" alt="img"></p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTQ0NTAucG5n" alt="img"></p><p>至此，Github的注册以及Github Pages已经创建完成了。</p><h2 id="三、配置Git用户名和邮箱"><a href="#三、配置Git用户名和邮箱" class="headerlink" title="三、配置Git用户名和邮箱"></a>三、配置Git用户名和邮箱</h2><p>在桌面点击鼠标右键，点击<code>Git Bash Here</code>，会出现一个界面如下图所示：</p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMTUxMTgucG5n" alt="img"></p><p>然后分别输入下面的两个命令，并回车：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"此处填写你注册时的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"此处填写你注册时的邮箱"</span><span class="token comment" spellcheck="true"># 一般只要不报错，可以跳过下面寻找.gitconfig文件</span></code></pre><p>然后找到<code>.gitconfig</code>文件，文件存放位置在<code>C:/Users/[username]/.gitconfig</code>（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！</p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjAwMTYucG5n" alt="img"></p><h2 id="四、本地安装hexo静态博客框架"><a href="#四、本地安装hexo静态博客框架" class="headerlink" title="四、本地安装hexo静态博客框架"></a>四、本地安装hexo静态博客框架</h2><ol><li>首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为blogtest的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择<code>Git Bash Here</code>，然后依次输入如下命令，：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># hexo框架的安装</span><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token comment" spellcheck="true"># 等上一个命令完成后，在输入下面的命令</span>hexo init <span class="token operator">&lt;</span>新建文件夹的名称<span class="token operator">></span>  <span class="token comment" spellcheck="true">#初始化文件夹</span><span class="token function">cd</span> <span class="token operator">&lt;</span>新建文件夹的名称<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true"># 安装博客所需要的依赖文件</span></code></pre><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjExMjkucG5n" alt="img"></p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjExNDQucG5n" alt="img"></p><p>等待运行完成，此时文件夹中多了许多文件。<br><strong>注意</strong>：<strong>后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。</strong><br>此时Hexo框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令 :</p><pre class=" language-bash"><code class="language-bash">hexo ghexo s</code></pre><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjExNTcucG5n" alt="img"></p><p>浏览器中打开localhost的4000端口或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。</p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjEyMDYucG5n" alt="img"></p><h2 id="五、本地博客发布到Github-Pages"><a href="#五、本地博客发布到Github-Pages" class="headerlink" title="五、本地博客发布到Github Pages"></a>五、本地博客发布到Github Pages</h2><p>之前的步骤中，我们已经完成了对Github账户的注册以及Github Pages的创建，接下来是将本地博客发布至Github Pages。</p><ol><li>首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><ol><li>紧接着，将本地目录与GitHub关联起来，输入下面的命令行：</li></ol><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱地址"</span></code></pre><p>输入后一直回车，然后在<code>C:/Users/[username]</code>目录下找到名为<code>.ssh</code>的文件夹， 文件夹内会有两个文件，一个<code>id_rsa.pub</code>一个<code>id_rsa</code>，用文本编辑器打开<code>id_rsa.pub</code>，复制里面的的内容。 然后打开Github，点击右上角的头像 <strong>Settings</strong> 选择<strong>SSH and GPG keys</strong></p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjI3NDYucG5n" alt="img"></p><p>点击<strong>New SSH key</strong> 将之前复制的内容粘帖到Key的框中。 上面的<strong>Title</strong>可以随意，点击<strong>Add SSH key</strong> 完成添加。</p><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL1lhZmluZS9ZYWZpbmUtaW1ncy9pbWFnZXMvMjAxOTExMTcyMjMwNDkucG5n" alt="img"></p><p>然后回到Git的命令行界面，测试一下是否与GitHub连接成功。输入下面的命令行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>点击回车，然后会出现一个询问内容，输入<code>yes</code>，回车，会出现一段内容，<code>Hi &lt;account name&gt;! You've successfully authenticated, but GitHub doesnot provide shell access.</code>。 说明连接成功。此处这个<code>&lt;account name&gt;</code>应该是你Github的用户名。</p><ol><li>进入博客站点目录，用文本编辑器打开<code>_config.yml</code>，这个<code>_config.yml</code>是博客的配置文件，在以后的博客修改，如个性化修改，博客SEO优化等都会使用到，修改如下图的几个地方：</li></ol><pre class=" language-yml"><code class="language-yml">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种   timezone: 时区</code></pre><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/image-20201031103725085.png" alt="image-20201031103725085"></p><p>滑到文件最底部，有一个deploy，在deploy下面添加一个repo项 ，一个branch项。填入如下代码，并如下图所示：</p><pre class=" language-yml"><code class="language-yml">type: gitrepo: git@github.com:Github用户名/github用户名.github.io.git  //也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git            branch: master</code></pre><p><img src="hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.assets/image-20201031104140819.png" alt="image-20201031104140819"></p><ol><li>最后就是生成页面，并发布至Github Pages，执行如下命令：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Hexo会根据配置文件渲染出一套静态页面</span>hexo g<span class="token comment" spellcheck="true"># 将上一步渲染出的一系列文件上传至至Github Pages</span>hexo d<span class="token comment" spellcheck="true"># 也可以直接输入此命令，直接完成渲染和上传</span>hexo g -d</code></pre><p>上传完成后，在浏览器中打开<strong>https://&lt;用户名&gt;.github.io</strong>，查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>博客到此就基本可以使用了，原生主题但还是比较丑，我们可以到hexo官网自选主题安装来进行美化，个人推荐的几个主题有sakura、butterfly、matery这几个都比较美观，还有next和yelee主题功能也比较多，那么下篇将介绍一下matery主题的安装配置</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git&amp;GitHub常用指令</title>
      <link href="/2020/08/21/git-github-chang-yong-zhi-ling/"/>
      <url>/2020/08/21/git-github-chang-yong-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-amp-GitHub常用指令"><a href="#Git-amp-GitHub常用指令" class="headerlink" title="Git&amp;GitHub常用指令"></a>Git&amp;GitHub常用指令</h1><h2 id="Git-命令行操作"><a href="#Git-命令行操作" class="headerlink" title="Git 命令行操作"></a>Git 命令行操作</h2><ol><li><p>本地库初始化:</p><ul><li><p>命令：<code>git init</code></p><p>注意：.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡 乱修改。</p></li></ul></li></ol><ol start="2"><li><p>设置签名</p><p>形式:</p><pre class=" language-shell"><code class="language-shell">用户名：tom Email 地址：goodMorning@atguigu.com作用：区分不同开发人员的身份</code></pre><p>命令:</p><pre class=" language-shell"><code class="language-shell">项目级别/仓库级别：仅在当前本地库范围内有效git config user.name tom_progit config user.email goodMorning_pro@atguigu.com信息保存位置：./.git/config 文件系统用户级别：登录当前操作系统的用户范围git config --global user.name tom_glbgit config --global user.email goodMorning_pro@atguigu.com信息保存位置：~/.gitconfig 文件3</code></pre></li></ol><ol start="3"><li><p>基本操作</p><ul><li><p>状态查看  <code>git status</code> </p><p>查看工作区、暂存区状态</p></li></ul><ul><li><p>添加单个  <code>git add [file name]</code> </p><p>将工作区的“新建/修改”添加到暂存区</p></li><li><p>添加全部  <code>git add .</code></p><p>将工作区的全部“新建/修改”添加到暂存区</p></li><li><p>提交  <code>git commit -m "commit message" [file name]</code> </p><p>将暂存区的内容提交到本地库</p></li><li><p>查看历史记录  <code>git log</code> </p><p>多屏显示控制方式： 空格向下翻页 b 向上翻页 q 退出</p><ul><li>以单行形式显示: <code>git log --pretty=oneline</code></li><li>或 <code>git log --oneline</code> (显示部分)</li><li>显示HEAD@{移动到当前版本需要多少步}<code>git reflog</code></li></ul></li></ul></li></ol><ol start="4"><li><p>前进后退</p><ul><li><p>基于索引值操作[推荐] </p><ul><li><p><code>git reset --hard [局部索引值]</code> </p></li><li><p><code>git reset --hard a6ace91</code> </p></li></ul></li><li><p>使用^符号：只能后退 </p><ul><li><p><code>git reset --hard HEAD^</code> </p><p>注：一个^表示后退一步，n 个表示后退 n 步 </p></li></ul></li><li><p>使用~符号：只能后退 </p><ul><li><p><code>git reset --hard HEAD~n</code> </p><p>注：表示后退 n 步</p></li></ul></li></ul></li></ol><ol start="5"><li><p>reset 命令的三个参数对比</p><ul><li><p>–soft 参数 </p><p>仅仅在本地库移动 HEAD 指针</p></li><li><p>–mixed 参数 </p><p>在本地库移动 HEAD 指针 </p><p>重置暂存区</p></li><li><p>–hard 参数 </p><p>在本地库移动 HEAD 指针 </p><p>重置暂存区 </p><p>重置工作区</p></li></ul></li></ol><ol start="6"><li><p>删除文件并找回</p><ul><li>前提：删除前，文件存在时的状态提交到了本地库。</li><li>操作：<code>git reset --hard [指针位置]</code> <ul><li>删除操作已经提交到本地库：指针位置指向历史记录 </li><li>删除操作尚未提交到本地库：指针位置使用 HEAD</li></ul></li></ul></li></ol><ol start="7"><li><p>比较文件差异</p><ul><li><p><code>git diff [文件名]</code> </p><p>将工作区中的文件和暂存区进行比较 </p></li><li><p><code>git diff [本地库中历史版本] [文件名]</code> </p><p>将工作区中的文件和本地库历史记录比较 </p></li><li><p>不带文件名比较多个文件</p></li></ul></li></ol><ol start="8"><li><p>分支操作</p><ul><li><p>创建分支 <code>git branch [分支名]</code> </p></li><li><p>查看分支 <code>git branch -v</code> </p></li><li><p>切换分支 <code>git checkout [分支名]</code> </p></li><li><p>合并分支 </p><ul><li><p>第一步：切换到接受修改的分支（被合并，增加新内容）上 </p><p><code>git checkout [被合并分支名]</code></p></li><li><p>第二步：执行 merge 命令 </p><p><code>git merge [有新内容分支名]</code></p></li></ul></li><li><p>解决冲突</p><ul><li><p>冲突的表现:<img src="Git&amp;GitHub%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.assets/image-20200818165333214.png" alt="image-20200818165333214"></p></li><li><p>冲突的解决 </p><ul><li><p>第一步：编辑文件，删除特殊符号 </p></li><li><p>第二步：把文件修改到满意的程度，保存退出 </p></li><li><p>第三步：git add [文件名] </p></li><li><p>第四步：git commit -m “日志信息” </p><ul><li>注意：此时 commit 一定不能带具体文件名</li></ul></li></ul></li></ul></li></ul></li></ol><h2 id="本地库和远程库"><a href="#本地库和远程库" class="headerlink" title="本地库和远程库"></a>本地库和远程库</h2><p><img src="Git&amp;GitHub%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.assets/image-20200818191919833.png" alt="image-20200818191919833"></p><p><img src="Git&amp;GitHub%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.assets/image-20200818191944615.png" alt="image-20200818191944615"></p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><ol><li><p>创建远程库地址别名 </p><ul><li><p><code>git remote -v</code> 查看当前所有远程地址别名 </p></li><li><p><code>git remote add [别名] [远程地址]</code></p></li></ul></li><li><p>推送 </p><ul><li><code>git push [别名] [分支名]</code></li></ul></li><li><p>克隆 </p><ul><li><p><code>git clone [远程地址]</code></p></li><li><p>效果 </p><ul><li>完整的把远程库下载到本地 </li><li>创建 origin 远程地址别名 </li><li>初始化本地库</li></ul></li></ul></li><li><p>拉取 </p><ul><li><p><code>pull=fetch+merge</code> </p></li><li><p><code>git fetch [远程库地址别名] [远程分支名]</code> </p></li><li><p><code>git merge [远程库地址别名/远程分支名]</code> </p></li><li><p><code>git pull [远程库地址别名] [远程分支名]</code></p></li></ul></li><li><p>解决冲突 </p><ul><li>要点 <ul><li>如果不是基于 GitHub 远程库的最新版所做的修改，不能推送，必须先拉取。</li><li>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。</li></ul></li></ul></li><li><p>SSH 登录</p><ul><li><p>进入当前用户的家目录 </p><ul><li>$ <code>cd ~</code> </li></ul></li><li><p>删除.ssh 目录 </p><ul><li>$ <code>rm -rvf .ssh</code> </li></ul></li><li><p>运行命令生成.ssh 密钥目录 </p><ul><li><p>$ <code>ssh-keygen -t rsa -C atguigu2018ybuq@aliyun.com</code> </p></li><li><p>[注意：这里-C 这个参数是大写的 C] </p></li></ul></li><li><p>进入.ssh 目录查看文件列表 </p><ul><li>$ <code>cd .ssh </code></li><li>$ <code>ls -lF</code></li></ul></li><li><p>查看 id_rsa.pub 文件内容</p><ul><li>$ <code>cat id_rsa.pub</code> </li></ul></li><li><p>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys </p></li><li><p>New SSH Key </p></li><li><p>输入复制的密钥信息 </p></li><li><p>回到 Git bash 创建远程地址别名 </p></li><li><p><code>git remote add origin_ssh git@github.com:atguigu2018ybuq/huashan.git</code> </p></li><li><p>推送文件进行测试</p></li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八个提升搜索效率的小技巧</title>
      <link href="/2020/08/21/ba-ge-ti-gao-sou-suo-xiao-lu-de-ji-qiao/"/>
      <url>/2020/08/21/ba-ge-ti-gao-sou-suo-xiao-lu-de-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="八个提升搜索效率的小技巧"><a href="#八个提升搜索效率的小技巧" class="headerlink" title="八个提升搜索效率的小技巧"></a>八个提升搜索效率的小技巧</h1><h2 id="一、排除关键词"><a href="#一、排除关键词" class="headerlink" title="一、排除关键词"></a>一、排除关键词</h2><p><strong>减号 + 关键词</strong></p><p>排除不想要的关键词</p><pre class=" language-shell"><code class="language-shell">//如:搜苹果而不是苹果手机苹果 -手机</code></pre><h2 id="二、精确搜索"><a href="#二、精确搜索" class="headerlink" title="二、精确搜索"></a>二、精确搜索</h2><p><strong>给关键词加引号</strong>（ 只搜索引号里的字）</p><pre class=" language-shell"><code class="language-shell">"达拉不崩吧"</code></pre><h2 id="三、指定网站内搜索"><a href="#三、指定网站内搜索" class="headerlink" title="三、指定网站内搜索"></a>三、指定网站内搜索</h2><p><strong>site:域名 + 关键字</strong>（加号为空格）</p><pre class=" language-shell"><code class="language-shell">//只搜索知乎网站上的内容site:zhihu.com 论文</code></pre><h2 id="四、指定文件格式"><a href="#四、指定文件格式" class="headerlink" title="四、指定文件格式"></a>四、指定文件格式</h2><p><strong>filetype:文件格式 + 关键字</strong>（加号为空格）</p><pre class=" language-shell"><code class="language-shell">//只搜索pdf格式的内容filetype:pdf 论文</code></pre><h2 id="五、指定标题搜索"><a href="#五、指定标题搜索" class="headerlink" title="五、指定标题搜索"></a>五、指定标题搜索</h2><p><strong>intitle:关键字</strong></p><p>关键字的内容只出现在标题中</p><h2 id="六、指定正文内搜索"><a href="#六、指定正文内搜索" class="headerlink" title="六、指定正文内搜索"></a>六、指定正文内搜索</h2><p><strong>intext:关键字</strong> 和 <strong>allintext:关键字</strong></p><p>要求在搜索结果的正文里包含这个或这些关键字</p><h2 id="七、指定地址内搜索"><a href="#七、指定地址内搜索" class="headerlink" title="七、指定地址内搜索"></a>七、指定地址内搜索</h2><p><strong>inurl:关键字</strong></p><p>要求在网页的url中包含这个关键字</p><h2 id="八、结合使用"><a href="#八、结合使用" class="headerlink" title="八、结合使用"></a>八、结合使用</h2><pre class=" language-shell"><code class="language-shell">//可以将上面的几种方法结合在一起使用，更精确搜索site:douban.com 亲密关系 intext:罗兰米勒</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2020/08/21/markdown-ru-men-ji-yu-fa/"/>
      <url>/2020/08/21/markdown-ru-men-ji-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h2 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1.代码块"></a>1.代码块</h2><pre class=" language-shell"><code class="language-shell">代码块语法: ctrl shift K​```加上语言类型```</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-shell"><code class="language-shell">部分代码: ctrl shift ```代码内容`</code></pre><p><code>var a = 10</code></p><p><code>var a = 20</code></p><h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2.标题"></a>2.标题</h2><pre class=" language-shell"><code class="language-shell"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p><code>ctrl 0</code>到<code>ctrl 4</code>:普通文本、一级到四级标题</p><h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h2><pre class=" language-shell"><code class="language-shell">//加粗 ctrl B**加粗内容**//斜体 ctrl I*斜体内容*//加粗斜体***加粗斜体内容***//删除线 shift alt 5~~删除线内容~~//下划线 ctrl U<u>下划线内容</u>//代码高亮==代码高亮内容==</code></pre><p><strong>加粗内容</strong></p><p><em>斜体内容</em></p><p><strong><em>加粗斜体内容</em></strong></p><p><del>删除线内容</del></p><p><u>下划线内容</u></p><p>==代码高亮内容==</p><h2 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h2><pre class=" language-shell"><code class="language-shell">// 引用语法>作者:某某某>>作者:某某某>>>作者:某某某</code></pre><blockquote><p>作者:某某某</p><blockquote><p>作者:某某某</p><blockquote><p>作者:某某某  </p></blockquote></blockquote></blockquote><h2 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h2><pre class=" language-shell"><code class="language-shell">// 分割线1--- 、___***</code></pre><hr><hr><h2 id="6-图片"><a href="#6-图片" class="headerlink" title="6.图片"></a>6.图片</h2><pre class=" language-shell"><code class="language-shell">// 在线图片/本地图片 ctrl shift I![图片名称](图片路径)![我的图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597578639923&di=bf1a410b9aa501c6db4e869903fe8a1d&imgtype=0&src=http%3A%2F%2Fc.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2F0824ab18972bd407ff38f2b378899e510eb30984.jpg)</code></pre><p><img src="MarkDown%E5%85%A5%E9%97%A8%E7%BA%A7%E8%AF%AD%E6%B3%95.assets/timg" alt="我的图片"></p><h2 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h2><pre class=" language-shell"><code class="language-shell">// 超链接语法 ctrl K[链接名](链接地址)[bilibili](https://www.bilibili.com/)<https://www.bilibili.com/></code></pre><p><a href="https://www.bilibili.com/">bilibili</a></p><p><a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p><h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><pre class=" language-shell"><code class="language-shell">// 无序列表 -、+、*- 列表一- 列表二- 列表三// 有序列表 1.1. 列表一2. 列表二3. 列表三// 列表嵌套* 一级列表  * 二级列表      * 三级列表</code></pre><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><ol><li>列表一</li><li>列表二</li><li>列表三</li></ol><ul><li>一级列表<ul><li>二级列表<ul><li>三级列表</li></ul></li></ul></li></ul><h2 id="9-注释"><a href="#9-注释" class="headerlink" title="9.注释"></a>9.注释</h2><pre class=" language-shell"><code class="language-shell">待解释[^1][^1]: 1就是1</code></pre><p>待解释<a href="1%E5%B0%B1%E6%98%AF1">^1</a></p><h2 id="10-表格"><a href="#10-表格" class="headerlink" title="10.表格"></a>10.表格</h2><pre class=" language-shell"><code class="language-shell">// 第一行自带加粗效果，// 第二行分割标题和内容，添加冒号代表对齐方式// ctrl T插入表格| 姓名 | 性别 | 年龄 ||:----|:----:|----:|| 张三 | 男 | 18 || 李四 | 男 | 28 |</code></pre><table><thead><tr><th align="left">姓名</th><th align="center">性别</th><th align="right">年龄</th></tr></thead><tbody><tr><td align="left">张三</td><td align="center">男</td><td align="right">18</td></tr><tr><td align="left">李四</td><td align="center">男</td><td align="right">28</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2020/08/20/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2020/08/20/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="随便聊聊"><a href="#随便聊聊" class="headerlink" title="随便聊聊"></a>随便聊聊</h1><p>花了几天的时间搭建改来改去，想设置一些小功能，却被vscode格式化了ejs文件，不懂语法的我只能看着报错不知道怎么搞😂，只能重新再装一遍。最后终于还是把基本的东西都弄好了，顺便学了点yaml和ejs语法，不过到了自己做东西的时候遇到bug真的是让人头秃。好了，就这样后面在慢慢完善吧</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
